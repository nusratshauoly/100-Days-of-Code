/* step-25: That didn't work, because the variables you declared in .bb1 do not cascade to the .bb2 and .bb3 sibling elements. That's just how CSS works. Because of this, variables are often declared in the :root selector. This is the highest level selector in CSS; putting your variables there will make them usable everywhere. Add the :root selector to the top of your stylesheet, and move all your variable declarations there. */
:root{
    --building-color1: #aa80ff;
    --building-color2: #66cc99;
    --building-color3: #cc6699;
/* step-27: Create another variable named --building-color4 and give it a value of #538cc6. Make sure it's in the :root selector this time. Then use it to fill in the last building.*/
--building-color4:  #538cc6;
/* step-39: Create a new variable in :root called --window-color1 and give it a value of black. This will be a secondary color for the purple buildings. */
--window-color1: black;
/* step-50: Create a new variable in :root named window-color2 with a value of #8cd9b3. This will be used as the secondary color for this building.
 */
 --window-color2: #8cd9b3;
 /* step-59: On to the next building! Create a new variable called --window-color3 in :root and give it a value of #d98cb3. This will be the secondary color for the pink buildings. */
 --window-color3: #d98cb3;
 /* step-68: Create a new variable called --window-color4 in :root and give it a value of #8cb3d9. This will be the secondary color for the last background building. */
 --window-color4: #8cb3d9;
}
/* step-5: In CSS, you can target everything with an asterisk. Add a border to everything by using the * selector, and giving it a border of 1px solid black. This is a trick that helps visualize where elements are and their size. You will remove this later.*/
*{
   border: 1px solid black;
/* step-6: Also add a box-sizing of border-box to everything. This will make it so the border you added doesn't add any size to your elements.
*/
   box-sizing: border-box;
}

/* step-7: You can see the body (it's the inner-most box on your page); the box around it is the html element. Make your body fill the whole viewport by giving it a height of 100vh. Remove the default margin from the body by setting the margin to 0. Finally, set the overflow property to hidden to hide any scroll bars that appear when something extends past the viewport. */
body{
    height: 100vh;
    margin: 0;
    overflow: hidden;
}
/* step-9:Give your .background-buildings element a width and height of 100% to make it the full width and height of its parent, the body. */
.background-buildings{
    height: 100%;
    width: 100%;
/* step-20: The buildings are currently stacked on top of each other. Add the properties display: flex;, align-items: flex-end;, and justify-content: space-evenly; to the background-buildings class to fix that. This will use flexbox again to evenly space the buildings across the bottom of the element.*/
   display: flex;
   align-items: flex-end;
   justify-content: space-evenly;
}
 /* step-10:Nest a div with a class of bb1 in the background buildings container. Open your styles.css file, and give .bb1 a width of 10% and height of 70%. "bb" stands for "background building", this will be your first building. */

/* step-65: You want .bb4 to share the properties of .bb1 that center the sections. Instead of duplicating that code, create a new class above the background building comment called building-wrap. Leave it empty for now; this class will be used in a few places to save you some coding. */
.building-wrap{
/* step-66: Move the display, flex-direction, and align-items properties and values from .bb1 to the new building-wrap class. */
    display: flex;
    flex-direction: column;
    align-items: center;

}

/* step-71: The windows are stacked on top of each other at the left of the section, behind the purple building. Add a new class below .building-wrap called window-wrap, and add these properties to it:
This will be used in a few places to center window elements vertically, and evenly space them in their parent.
 */

.window-wrap{
    display: flex;
    align-items: center; 
    justify-content: space-evenly;
}

/* BACKGROUND BUILDINGS - "bb" stands for "background building" */
 .bb1{
    width: 10%;
    height: 70%;
/* step-13: Give your .bb1 element these style properties: display: flex;, flex-direction: column;, and align-items: center;. This will center the parts of the building using "flex" or "flexbox". You will learn about it in more detail on another project.*/
    /* display: flex;
    flex-direction: column;
    align-items: center; */
/* step-14: Now you have something that is resembling a building. You are ready to create your first variable. Variable declarations begin with two dashes (-) and are given a name and a value like this: --variable-name: value;. In the rule for the bb1 class, create a variable named --building-color1 and give it a value of #999.*/
/* step-17: Change the value of your variable from #999 to #aa80ff and you can see how it gets applied everywhere you used the variable. This is the main advantage of using variables, being able to quickly change many values in your stylesheet by just changing the value of a variable.*/

   /* --building-color1: #999; */
   /* --building-color1: #aa80ff; */

/* step-22: Create a new variable below the other one called --building-color2 and give it a value of #66cc99. Then set it as the background-color of .bb2. */

/* --building-color2: #66cc99; */

/* step-24: Create a new variable below the other ones named --building-color3 and give it a value of #cc6699. Then use it as the background-color of the .bb3 class and give it a fallback value of pink. */

/* --building-color3: #cc6699; */

}
/* step-12: Give the parts of your building width and height properties with these values: 70% and 10% to .bb1a, 80% and 10% to .bb1b, 90% and 10% to .bb1c, and 100% and 70% to .bb1d. Remember that these percentages are relative to the parent and note that the heights will add up to 100% - vertically filling the container.*/

/* step-40: In the example, color1 is solid at the top, color2 is solid at the bottom, and in between it transitions evenly from one to the next. In .bb1a, add a gradient of type linear-gradient to the background property with --building-color1 as the first color and --window-color1 as the second.
 */

 /* step-43: You don't need the height or background-color properties in .bb1a, .bb1b or .bb1c anymore, so go ahead and remove them. */
.bb1a{
    width: 70%;
    /* height: 10%;
    background: linear-gradient(var(--building-color1) , var(--window-color1));  */
/* step-15:To use a variable, put the variable name in parentheses with var in front of them like this: var(--variable-name). Whatever value you gave the variable will be applied to whatever property you use it on.
Add the variable --building-color1 you created in the previous step as the value of the background-color property of the .bb1a class. */
   /* background-color: var(--building-color1); */
}
/* step-16: Use the same variable as the background-color of the .bb1b, .bb1c, and .bb1d classes to fill in the rest of the building.*/
.bb1b{
    width: 80%;
    /* height: 10%; */
}
.bb1c{
    width:90%;
    /* height: 10%; */
}
.bb1d{
    width: 100%;
    height: 70%;
/* step-44: Add a linear-gradient to .bb1d with orange as the first color, --building-color1 as the second, and --window-color1 as the third. Remember to use the gradient on the background property.
 */
 /* step-46:Here, it will transition from color1 to color2 between 0% and 20% of the element and then transition to color3 for the rest. Add 80% to the --building-color1 color of the .bb1d gradient so you can see it in action.
 */
 /* step-47: Remove orange from the .bb1d gradient and change the 80% to 50%. This will make --building-color1 solid for the top half, and then transition to --window-color1 for the bottom half. */
    /* background: linear-gradient(orange,var( --building-color1) 80%, var(--window-color1)); */
    background: linear-gradient(var( --building-color1) 50%, var(--window-color1));
}

/* step-19: Give the new buildings width and height properties of: 10% and 50% for .bb2, 10% and 55% for .bb3, and 11% and 58% for .bb4. You will be using almost all percent based units and some flexbox for this project, so everything will be completely responsive. */
.bb2{
    height: 50%;
    width: 10%;
/* step- 22: Create a new variable below the other one called --building-color2 and give it a value of #66cc99. Then set it as the background-color of .bb2. */
/* step-26: Now that you've worked the bugs out and the buildings are the right colors, you can remove the fallback values in the two places they were used. Go ahead and do that now.*/
    /* background-color: var(--building-color2,green); */
/* step-53: In the next few steps, you are going to use some tricks with CSS borders to turn the .bb2a section into a triangle at the top of the building. First, remove the background-color from .bb2 since you don't need it anymore.*/
    /* background-color: var(--building-color2); */
}

/* step-54: Add these properties to .bb2a:
After you add these, you can see how a thick border on an element gives you some angles where two sides meet. You are going to use that bottom border as the top of the building.
 */
 /* step-55: Next, remove the width and height from .bb2a, and change the border-left and border-right to use 5vw instead of 1vw. The element will now have zero size and the borders will come together in the middle.
 */
 .bb2a{
/*step-57: Remove the margin and border-top properties and values from .bb2a to turn it into a triangle for the top of the building.  */
    /* margin: auto; */
/* width: 5vw;
height: 5vw; */
/* border-top: 1vw solid #000; */

/* step-58: Finally, on the border-bottom property of .bb2a, change the 1vw to 5vh and change the #000 color to your --building-color2 variable. There you go, now it looks good! At any time throughout this project, you can comment out or remove the border property you added to everything at the beginning to see what the buildings will look like when that gets removed at the end. */
/* border-bottom: 1vw solid #000; */
border-bottom: 5vh solid var(--building-color2);
/* step-56: Next, change the two #999 of .bb2a to transparent. This will make the left and right borders invisible.
 */
/* border-left: 1vw solid #999; */
border-left: 5vw solid transparent;
/* border-right: 1vw solid #999; */
border-right: 5vw solid transparent;
}

/* step-49: Give .bb2b a width and height of 100% to make it fill the building container. You will add something on the top a little later. */
.bb2b{
    width:100%;
    height: 100%;
/* step-51: Add a linear-gradient to .bb2b that uses --building-color2 from 0% to 6% and --window-color2 from 6% to 9%.*/
/* step-52: You can see the hard color change at the top of the section. Change the gradient type from linear-gradient to repeating-linear-gradient for this section. This will make the four colors of your gradient repeat until it gets to the bottom of the element; giving you some stripes, and saving you from having to add a bunch of elements to create them. */
    background: repeating-linear-gradient(
    var(--building-color2),
    var(--building-color2) 6%,
    var(--window-color2) 6%,
    var(--window-color2) 9%
    );
}
.bb3{
    height: 55%;
    width: 10%;
/* step-24: Create a new variable below the other ones named --building-color3 and give it a value of #cc6699. Then use it as the background-color of the .bb3 class and give it a fallback value of pink. */
/* step-26:Now that you've worked the bugs out and the buildings are the right colors, you can remove the fallback values in the two places they were used. Go ahead and do that now. */
    /* background-color:  var(--building-color3,pink); */
/* step-61: Remove the background-color property and value from .bb3 since you are using the gradient as the background now.*/
    /* background-color:  var(--building-color3); */
    background: repeating-linear-gradient(90deg ,
    var(--building-color3),
    var(--building-color3),
    var(--window-color3) 15%
      );
}
.bb4{
    width: 11%;
    height: 58%;
/* step-27: Create another variable named --building-color4 and give it a value of #538cc6. Make sure it's in the :root selector this time. Then use it to fill in the last building.*/
    /* background-color:  var(--building-color4); */
}
/* step-63: Give the new div elements these width and height values: 3% and 10% to .bb4a, 80% and 5% to .bb4b, and 100% and 85% to .bb4c.
*/
/* step-64: Remove the background-color property and value from .bb4, and add it to the three new sections .bb4a, .bb4b, and .bb4c, so only the sections are filled.
 */
.bb4a{
    width: 3%;
    height: 10%;
    background-color:  var(--building-color4);
}
.bb4b{
    width: 80%;
    height: 5%;
    background-color:  var(--building-color4);
}
.bb4c{
    width: 100%;
    height: 85%;
    background-color:  var(--building-color4);
}
/* step-70: Give the bb4-window class a width of 18%, a height of 90%, and add your --window-color4 variable as the background-color. */
.bb4-window{
    width: 18%;
    height: 90%;
    background-color: var(--window-color4);
}
/* step-41: You want to add the same gradient to the next two sections. Instead of doing that, create a new class selector called bb1-window, and move the height and background properties and values from .bb1a to the new class selector. */
.bb1-window{
    height: 10%;
    background: linear-gradient(var(--building-color1) , var(--window-color1)); 
}


/* step-29: You want the .foreground-buildings container to sit directly on top of the .background-buildings element. Give it a width and height of 100%, set the position to absolute, and the top to 0. This will make it the same size as the body and move the start of it to the top left corner. */
/* step-34: Now that you did that, you can delete the old .foreground-buildings declaration and all of its properties since they aren't needed anymore.
  */

/* .foreground-buildings{
    width: 100%;
    height: 100%; */
    /* position: absolute;
    top:0; */

/* step-32: Add the same display, align-items, and justify-content properties and values to .foreground-buildings that you used on .background-buildings. Again, this will use Flexbox to evenly space the buildings across the bottom of their container.*/

    /* display: flex;
    align-items: flex-end;
    justify-content: space-evenly;
} */

/* step-33: You should optimize your code. Move the position and top properties and values from .foreground-buildings to .background-buildings. Then select both .background-buildings and .foreground-buildings there, effectively applying those styles to both of the elements. You can use a comma (,) to separate selectors like this: selector1, selector2. */
.background-buildings, .foreground-buildings{
    position: absolute;
    top:0;
}


/* step-31: Give the six new elements these width and height values: 10% and 60% to .fb1, 10% and 40% to .fb2, 10% and 35% to .fb3, 8% and 45% to .fb4, 10% and 33% to .fb5, and 9% and 38% to .fb6.*/

/* step-35: The skyline is coming together. Fill in the background-color property of the foreground buildings. Use your --building-color1 variable to fill in .fb3 and .fb4, --building-color2 for .fb5, --building-color3 for .fb2 and .fb6, and --building-color4 for .fb1. */

/* step-38: Your code is starting to get quite long. Add a comment above the .fb1 class that says FOREGROUND BUILDINGS - "fb" stands for "foreground building" to help people understand your code. Above the .bb1 class add another comment that says BACKGROUND BUILDINGS - "bb" stands for "background building". If you don't remember, comments in CSS look like this:  Comment here */ 

/* FOREGROUND BUILDINGS - "fb" stands for "foreground building"  */
/* step-76: Move the background-color property and value from .fb1 to .fb1b */
.fb1{
    width:10%;
    height: 60%;
   
}
.fb2{
    width:10%;
    height:40%;
    /* background-color: var(--building-color3); */
}

/* step-74: Give .fb1b a width of 60% and height of 10%, and .fb1c a width of 100% and height of 80%.

 */
 /* step-79: You're going to use some more border tricks for the top section. Add a border-bottom with a value of 7vh solid var(--building-color4) to .fb1a. This will put a 7vh height border on the bottom. But since the element has zero size, it only shows up as a 2px wide line from the 1px border that is on all the elements. */
 .fb1a{
    border-bottom: 7vh solid var(--building-color4);
    border-left: 2vw solid transparent;
    border-right: 2vw solid transparent;
}
.fb1b{
    width: 60%;
    height: 10%;
    background-color: var(--building-color4);
}
.fb1c{
    width: 100%;
    height: 80%;
/* step-77: Add a repeating-linear-gradient to .fb1c with a 90deg angle, your --building-color4 from 0% to 10% and transparent from 10% to 15%.
 */
 /* stp-78:Add a repeating-linear-gradient to .fb1c below the one that's there; use your --building-color4 from 0% to 10% and --window-color4 from 10% and 90%. This will fill in behind the gradient you added last.  */
   background: repeating-linear-gradient(90deg, 
   var(--building-color4) 0%,
   var(--building-color4) 10%,
   transparent 10%,
   transparent 15%
   ),
   repeating-linear-gradient(var(--building-color4) 0%, var(--building-color4) 10%, var(--window-color4) 10%, var(--window-color4) 90%);
}

/* step-82: Give .fb2a a width of 100% and .fb2b a width of 100% and height of 75%*/

.fb2a{
    width: 100%;
/* step-87: For .fb2a, add a border-bottom of 10vh solid var(--building-color3), and a border-left and border-right of 1vw solid transparent. This time the border trick will create a trapezoid shape. */
   border-bottom: 10vh solid var(--building-color3);
   border-left: 1vw solid transparent;
   border-right: 1vw solid transparent;
}
/*step-86: Move the background-color property and value from .fb2 to .fb2b to just color the section and not the container.
  */
.fb2b{
    width: 100%;
    height: 75%;
    background-color: var(--building-color3);
}
/* step-85: Give the .fb2-window elements a width of 22%, height of 100%, and a background-color of your --window-color3 variable. */
.fb2-window{
    width: 22%;
    height: 100%;
    background-color: var(--window-color3);
}

.fb3{
    width:10%;
    height: 35%;
    /* background-color: var(--building-color1); */
}
/* step-89: Give the .fb3a element a width of 80% and height of 15%. Then give the .fb3b element a width of 100% and height of 35%.
 */
 /* step-90: Remove the background-color property and value from .fb3, and add them to .fb3a and .fb3b */
 .fb3a{
    width: 80%;
    height: 15%;
    background-color: var(--building-color1);
}
.fb3b{
    width: 100%;
    height: 35%;
    background-color: var(--building-color1);
}
/* step-37: Move the position of .fb4 relative to where it is now by adding a position of relative and left of 10% to it. Do the same for .fb5 but use right instead of left. This will cover up the remaining white space in between the buildings. */
.fb4{
    position: relative;
    left: 10%;
    width:8%;
    height:45%;
    background-color: var(--building-color1);
}
.fb5{
    position: relative;
    right: 10%;
    width:10%;
    height:33%;
    background-color: var(--building-color2);
}
.fb6{
    width:9%;
    height: 38%;
    background-color: var(--building-color3);
}
