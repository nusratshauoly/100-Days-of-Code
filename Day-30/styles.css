/* step-2: Target the body element to set the background to a linear gradient angled 45 degrees clockwise, starting at rgb(118, 201, 255) and ending at rgb(247, 255, 222).
 */
 /* step-3: Normalise your page's sizing, by removing the body element's margin and padding. */
 /* step-54: So far, the .face and .chin elements have the same background-color.
Create a custom CSS property called --penguin-face, and set it to white.

 */
 :root{
 --penguin-face: white;
 }
 body{
    margin: 0;
    padding: 0;
    background: linear-gradient(45deg,rgb(118, 201, 255), rgb(247, 255, 222) );
/* step-4:Normalise your page, by setting the width to 100%, and height to 100vh.  */
width: 100%;
height: 100vh;
/* step-5: Remove both the horizontal and vertical scrollbars, and prevent programmatic scrolling, using only one property. by giving overflow: clip
 */
 overflow: clip;
}
/* step-7: Target the .ground element, and set its width to take up the full width of the viewport. Then, set the height to 400px. */
.ground{
    height: 400px;
    width: 100vw;
/* step-8:Give the .ground element a background with a linear gradient angled 90 degrees clockwise, starting at rgb(88, 175, 236) and ending at rgb(182, 255, 255) */
background: linear-gradient(90deg, rgb(88, 175, 236), rgb(182, 255, 255));
z-index: 3;
position: absolute;
/* step-18: To overlap the mountain and .ground elements better, give the mountain a margin-top of 100px, and the .ground element a margin-top of -58px. */
margin-top: -58px;
}
/* step-11: Target the .penguin element, and set its width and height to 300px.
 */
 .penguin{
    width: 300px;
    height: 300px;
/* step-12: Use the margin property to horizontally center the .penguin element, and set the margin-top to 75px. */
margin: auto;
margin-top: 75px;
/* step-29: Change the stack level of the .penguin element such that it appears in front of the .ground element, and give it a position of relative. */
z-index:4;
position: relative;
}
/* step-14: Target the .left-mountain element, and set its width and height to 300px. Then, set the background to a linear gradient starting at rgb(203, 241, 228) and ending at rgb(80, 183, 255). */
.left-mountain{
    width:300px;
    height: 300px;
    background:linear-gradient(rgb(203, 241, 228), rgb(80, 183, 255));
/* step-15: To prevent the mountain from pushing the .ground element, adjust its position to prevent it from taking up space in the page layout. */
   position: absolute;
/*step-16: To make the mountain look more like a mountain, you can use the skew transform function, which takes two arguments. The first being an angle to shear the x-axis by, and the second being an angle to shear the y-axis by.
Use the transform property to skew the mountain by 0deg in the x-axis and 44deg in the y-axis. */
transform: skew(0deg, 44deg);
/* step-17:Set the stack level of the mountain element such that it remains directly behind the .ground element.*/
z-index: 2;
/* step-18: To overlap the mountain and .ground elements better, give the mountain a margin-top of 100px, and the .ground element a margin-top of -58px. */
margin-top: 100px;
}
/* step-20: Target the .back-mountain element, and set its width and height to 300px. Then, set the background to a linear gradient starting at rgb(203, 241, 228) and ending at rgb(47, 170, 255). */
.back-mountain{
    width:300px;
    height:300px;
    background: linear-gradient(rgb(203, 241, 228),rgb(47, 170, 255));
/* step-21: Set the position property of the .back-mountain to prevent it from taking up space in the page layout. */
    position: absolute;
/* step-22: Change the stack level of the .back-mountain element such that it is directly behind the .left-mountain element. */
    z-index: 1;
/* step-23: Rotate the .back-mountain element by 45deg clockwise. Then, give it a left property of 110px, and a top property of 225px.
 */
transform: rotate(45deg);
left:110px;
top:225px;
}
/* step-25: Give the .sun element a width and height of 200px, and a background-color of yellow. */
.sun{
    height: 200px;
    width: 200px;
    background-color: yellow;
/* step-26: Set the position property of the sun to prevent it from taking up space in the page layout, and set the border-radius such that the sun's shape is a circle. */
position: absolute;
border-radius: 50%;
/* step-27: Position the sun in the top right corner of the screen such that 75px of its top and right edges are off screen. */
right:-75px;
top:-75px;
}
/* step-30: Target the .penguin-head element, and give it a width half of its parent's, and a height of 45%. Then, set the background to a linear gradient at 45deg starting at gray, and ending at rgb(239, 240, 228). */
.penguin-head{
    width:50%;
    height:45%;
    background: linear-gradient(45deg,gray,rgb(239, 240, 228));
/* step-31: Most penguins do not have a square head.
Give the penguin a slightly oval head by setting the radius of the top corners to 70% and the radius of the bottom corners to 65%. */
border-radius: 70% 70% 65% 65%;
/* step-35: Position the .penguin-head element 10% from the top, and 25% from the left of its parent.
 */
 top:10%;
 left: 25%;
 /* step-37: Change the stack level of the .penguin-head element such that it appears in front of the .penguin-body element. */
 z-index: 1;
}
/* step-32:Target the .penguin-body element, and give it a width of 53%, and a height of 45%. Then, set the background to a linear gradient at 45deg, rgb(134, 133, 133) from 0%, rgb(234, 231, 231) from 25%, and white from 67%.
  */
  .penguin-body{
    width:53%;
    height:45%;
    background: linear-gradient(45deg, rgb(134, 133, 133) 0%,rgb(234, 231, 231) 25%, white 67%);
/* step-33: Use the border-radius property with a value of 80% 80% 100% 100%, to give the penguin a slightly rounded body.*/
    border-radius: 80% 80% 100% 100%;
/* step-36: Position the .penguin-body element 40% from the top, and 23.5% from the left of its parent. */
top:40%;
left:23.5%;
}
/* step-38: To give the penguin body a crest, create a pseudo-element that is the first child of the .penguin-body element. Set the content property of the pseudo-element to an empty string. */
.penguin-body::before{
    content: "";
/* step-39:Position the pseudo-element relative to its closest positioned ancestor.
 */
 position:absolute;
 /* step-40: Give the pseudo-element a width half that of its parent, a height of 45%, and a background-color of gray.
 */
 width: 50%;
 height:45%;
 background-color: gray;
 /* step-41:Position the pseudo-element 10% from the top and 25% from the left of its parent. */
 top:10%;
 left:25%;
 /* step-42:Round off the crest, by giving the pseudo-element bottom corners a radius of 100%, leaving the top corners at 0%.
 */
 border-radius: 0% 0% 100% 100%;
 top:0%;
 /* step-43: Increase the psuedo-element's transparency by 30%. */
 opacity: 70%;
}
/* step-34: Target all descendent elements of the .penguin element, and give them a position of absolute.*/
.penguin *{
    position:absolute;
  }
/* step-45: Give the .face elements a width of 60%, a height of 70%, and a background-color of white. */
.face{
    width: 60%;
    height: 70%;
    /* step-55: Where relevant, replace property values with your --penguin-face variable.
 */
       /* background-color: white; */

    background-color: var(--penguin-face);
/* step-46: Make the top corners of the .face elements have a radius of 70%, and the bottom corners have a radius of 60%.
 */
    border-radius: 70% 70% 60% 60%;
/* step-47: Position the .face elements so that they are 15% from the top. */
    top:15%;
}
/* step-49: Target the .face element with the left class, and position it 5% left of its parent. */
.face.left{
    left:5%;
}
/* step-50:Target the .face element with the right class, and position it 5% right of its parent.
 */
 .face.right {
    right: 5%;
  }
/* step-52: Target the .chin element, and give it a width of 90%, height of 70%, and background-color of white. */
.chin{
    width: 90%;
    height: 70%;
 /* step-55: Where relevant, replace property values with your --penguin-face variable.
 */
    /* background-color: white; */
    background-color: var(--penguin-face);
/* step-53: Position the .chin element such that it is 25% from the top, and 5% from the left of its parent. Then, give the top corners a radius of 70%, and the bottom corners a radius of 100%.
 */
    top:25%;
    left:5%;
    border-radius: 70% 70% 100% 100%;
}